#include <iostream>
#include <cmath>
#include <cstring>
#include <string>

using namespace std;

void methodNewton(float a, float b, float mH);
float methodHord(float a, float b);
float F(float x);
float dF(float x);

struct Kord
{
	float X;
	float Y;
};

int main()
{
	system("chcp 1251>nul");
	cout << "Введите координаты a, b и промежуток М через пробел: ";
	float a, M, b, h;
	Kord* arr = new Kord[30];
	// Ввод координат и промежуток.
	cin >> a >> b >> M;
	// Вычисляем шаг по формуле.
	h = (b - a) / M;

	// Поиск всех координат, которые входят в промежуток от а до b.
	bool bi = false;
	int i = 0;
	float k = a;
	do {
		// Если умножение первой точки с шагом дает нуль, то добавляем в массив, иначе повышаем шаг.
		if (F(k) * F(k + h) < 0) {
			arr[i].X = k;
			arr[i].Y = k + h;
			cout << i + 1 << ". " << arr[i].X << " " << arr[i].Y << endl;
			i++;
			bi = true;
		}
		k += h;
	} 
	while (k <= b);

	// Если массив не пуст, то..
	if (!(arr == 0))
	{
		// инициализируем переменные.
		// 1. Для ввода значение с первого метода. 
		float method_hord;
		// 2. Для взятия значения у пользователя.
		int num;

		cout << "Введите номер: ";
		cin >> num;

		// Если число пользователя меньше кол-ва элементов в массиве, то..
		if (num != 0)
		{
			// присваиваем координаты переменным.
			a = arr[num].X;
			b = arr[num].Y;

			// Так же, выполняем две функции.
			/*
			* Нужно знать!
				1. Метод хорд - (метод секущих) метод предпологает, что
					деление рассматриваемого интервала будет выполняться
					в точке пересечения хорды с осью абсцисс (ось - Х)
					Следует отметить, что под хордой понимается отрезок, 
					который проведен через точки рассматриваемой функции 
					по концам рассматриваемого интервала.

				2. Метод Ньютона - поиск решения осуществляется путём построения 
				последовательных приближений и основан на принципах простой итерации.
			*/
			method_hord = methodHord(a, b);
			methodNewton(a, b, method_hord);
		}
		else
		{
			// Иначе выводим пользователю.
			cout << "Не верный ввод числа." << endl;
		}
	}
	else
	{
		// Если массив пуст, то корней нет. Выводим об этом пользователю.
		cout << "Не найдено ни одно корня." << endl;
	}
}


// Метод Хорд.
float methodHord(float a, float b) {
	cout << "\nХорды:" << endl;
	int iter = 0;
	// Движемся до числа E(эпислон).
	while (fabs(F(b)) > 0.001)
	{
		a = b - ((b - a) * F(b)) / (F(b) - F(a));
		b = a - ((a - b) * F(a)) / (F(a) - F(b));
		cout << ++iter << " " << "итерация, ответ " << b << endl;
	}
	return b;
}

// Метод Ньютона.
void methodNewton(float a, float b, float mH) {
	float x0, xn;
	cout << "\nНьютон:" << endl;
	if (F(a) * F(b) > 0) {
		cout << "Корней нет!" << endl;
	}
	else {
		x0 = mH;
		float eps = 0.001, f, df;
		int iter = 0;

		cout << "x0= " << a << " \n";
		do {
			f = F(a);
			df = dF(a);
			a = a - f / df;
			iter++;
			cout << iter << " итерация" << " ответ " << a << "\n";
		} while (fabs(f) > 0.001);

		cout << "\nОтвет: x = " << a;
		cout << endl << endl;
	}
}

// Наша функиця.
float F(float x)
{
	return 7.0 * cos(x / 7.0) - (7.0 / x);
}

// Производная от функции.
float dF(float x) {
	return -sin(x / 7.0) + (7 / (x * x));
}